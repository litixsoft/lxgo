// Code generated by MockGen. DO NOT EDIT.
// Source: audit/audit.go

// Package lxAuditMocks is a generated GoMock package.
package lxAuditMocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockIAudit is a mock of IAudit interface
type MockIAudit struct {
	ctrl     *gomock.Controller
	recorder *MockIAuditMockRecorder
}

// MockIAuditMockRecorder is the mock recorder for MockIAudit
type MockIAuditMockRecorder struct {
	mock *MockIAudit
}

// NewMockIAudit creates a new mock instance
func NewMockIAudit(ctrl *gomock.Controller) *MockIAudit {
	mock := &MockIAudit{ctrl: ctrl}
	mock.recorder = &MockIAuditMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAudit) EXPECT() *MockIAuditMockRecorder {
	return m.recorder
}

// LogEntry mocks base method
func (m *MockIAudit) LogEntry(action string, user, data interface{}, timeout ...time.Duration) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{action, user, data}
	for _, a := range timeout {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LogEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogEntry indicates an expected call of LogEntry
func (mr *MockIAuditMockRecorder) LogEntry(action, user, data interface{}, timeout ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{action, user, data}, timeout...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogEntry", reflect.TypeOf((*MockIAudit)(nil).LogEntry), varargs...)
}

// LogEntries mocks base method
func (m *MockIAudit) LogEntries(entries []interface{}, timeout ...time.Duration) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{entries}
	for _, a := range timeout {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LogEntries", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogEntries indicates an expected call of LogEntries
func (mr *MockIAuditMockRecorder) LogEntries(entries interface{}, timeout ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{entries}, timeout...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogEntries", reflect.TypeOf((*MockIAudit)(nil).LogEntries), varargs...)
}
