// Code generated by MockGen. DO NOT EDIT.
// Source: audit/audit.go

// Package lxAuditMocks is a generated GoMock package.
package lxAuditMocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIAudit is a mock of IAudit interface
type MockIAudit struct {
	ctrl     *gomock.Controller
	recorder *MockIAuditMockRecorder
}

// MockIAuditMockRecorder is the mock recorder for MockIAudit
type MockIAuditMockRecorder struct {
	mock *MockIAudit
}

// NewMockIAudit creates a new mock instance
func NewMockIAudit(ctrl *gomock.Controller) *MockIAudit {
	mock := &MockIAudit{ctrl: ctrl}
	mock.recorder = &MockIAuditMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAudit) EXPECT() *MockIAuditMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockIAudit) Send(elem interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", elem)
}

// Send indicates an expected call of Send
func (mr *MockIAuditMockRecorder) Send(elem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIAudit)(nil).Send), elem)
}

// IsActive mocks base method
func (m *MockIAudit) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive
func (mr *MockIAuditMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockIAudit)(nil).IsActive))
}
