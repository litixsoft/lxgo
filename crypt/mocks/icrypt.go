// Code generated by MockGen. DO NOT EDIT.
// Source: crypt/crypt.go

// Package lxCryptMocks is a generated GoMock package.
package lxCryptMocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockICrypt is a mock of ICrypt interface
type MockICrypt struct {
	ctrl     *gomock.Controller
	recorder *MockICryptMockRecorder
}

// MockICryptMockRecorder is the mock recorder for MockICrypt
type MockICryptMockRecorder struct {
	mock *MockICrypt
}

// NewMockICrypt creates a new mock instance
func NewMockICrypt(ctrl *gomock.Controller) *MockICrypt {
	mock := &MockICrypt{ctrl: ctrl}
	mock.recorder = &MockICryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICrypt) EXPECT() *MockICryptMockRecorder {
	return m.recorder
}

// GeneratePassword mocks base method
func (m *MockICrypt) GeneratePassword(plainPwd string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePassword", plainPwd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePassword indicates an expected call of GeneratePassword
func (mr *MockICryptMockRecorder) GeneratePassword(plainPwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePassword", reflect.TypeOf((*MockICrypt)(nil).GeneratePassword), plainPwd)
}

// ComparePassword mocks base method
func (m *MockICrypt) ComparePassword(plainPwd, hashedPwd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", plainPwd, hashedPwd)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword
func (mr *MockICryptMockRecorder) ComparePassword(plainPwd, hashedPwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockICrypt)(nil).ComparePassword), plainPwd, hashedPwd)
}
